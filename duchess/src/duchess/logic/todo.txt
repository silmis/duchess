/* TO-DO :
 * 
 * DONE - whoCanMoveHere()
 *      - iterate all pieces(see below), square in possible moves
 * DONE moves for rest of the pieces
 *      DONE - also look at existing ones
 *      DONE - can be combined? bishop+rook=queen?
 * DONE - moving pieces so that capturing works only on opponents pieces
 *      DONE - make sure no two pieces have same coordinates
 * DONE format for listPieces()
 *      - maybe list white and black separately
 *      NO - should be readable to both human and computer?
 * NO - save game -
 *      - use memento pattern!
 *      - then pickle?
 *      - best if state object can be provided as parameter to game constructor
 * DONE history
 *      DONE - probably pairs of Squares, maybe make a class
 *      DONE - enough info to reconstruct entire game? should be
 * DONE victory conditions
 *      DONE - is check && king cant move && it's not possible to resolve check
 *        (equivalent to: NO-ONE can move)
 * DONE check & mate:
 *      DONE - game is check if opponent moves a piece and in the new position king is threatened
 * make illegal: player moves and exposes one's king to a threat by opponent
 * DONE games can be drawn:
    "Draws are codified by various rules of chess including stalemate 
    (when the player to move has no legal move and is not in check), 
    threefold repetition (when the same position occurs three times with the 
    same player to move), and the fifty-move rule (when the last fifty 
    successive moves made by both players contain no capture or pawn move). 
    A draw also occurs when neither player has sufficient material to 
    checkmate the opponent or when no sequence of legal moves can lead 
    to checkmate."
 * DONE - which piece resolves check? "find square that if blocked
 *        results in opponent piece not being able to 
 *        move to king's square"
        DONE - problem: how to iterate through squares and find out if they truly
          "block" a piece. idea: create "phantom" pieces to represent possible
          situations. might be useful in the future?
 * DONE special moves: en passant
 *      - if pawn moves FROM rank 7 or 2 TWO steps AND opponent in file+-1 
 *        and rank 5 or 4, in the next turn opponent has a special legal move...
 *        (separate for black and white)
 * DONE special moves: castling
 *      - if rank 1 or 8 (from king to either rook) is NOT threatened 
 *        OR occupied AND rook (on that side) and king have NOT previously 
 *        moved king has a special legal move to file 7 or 3 (2 steps).
 *        rook moves to file 6 or 4. represented as two successive
 *        same-colour moves?
 * DONE fix pawn possible moves (showns taking own as possible)
 * FIXED logkeeper now screwed. it may be redundant.
 * DONE Pawn promotion!!
 */

nice-to have:
 * change Piece to use Square instead of rank/file
 * should color be somehow represented better?
 *      - teacher says: enum
 *      - split pieces? to find "all white pieces", have to iterate all
 * maybe make a method that finds pieces of particular color
 * some set algebraic functions for pieces and squares, union, intersection etc.

FIX:
DONE en passant recognizing own pieces as well
king can't escape check to a to-be threatened square
game should draw when x moves repeat
king can move to a square threatened by a pawn: pawn's diagonal moves are 
    not counted unless there is a piece in them